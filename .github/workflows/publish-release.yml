name: publish-release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - name: Install dependencies
      run: |
        sudo apt install \
          libavutil-dev \
          libavformat-dev \
          libswresample-dev \
          libavcodec-dev
    - name: Build
      run: cargo build -v
    - name: Run tests
      run: cargo test -v
  create-release:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    - name: Create new release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
  linux:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - name: Install dependencies
      run: |
        sudo apt install \
          libfftw3-dev \
          libavutil-dev \
          libavformat-dev \
          libswresample-dev \
          libavcodec-dev
    - name: Build release version
      run: cargo build -v --release
    - name: Compress binary
      run: cd target/release && tar cvzf needle-$GITHUB_REF_NAME-linux-amd64.tar.gz needle
    - name: Upload binary to the release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: target/release/*.tar.gz
  macos:
    runs-on: macos-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - name: Install dependencies
      run: brew install ffmpeg
    - name: Build release version
      run: cargo build -v --release
    - name: Compress binary
      run: cd target/release && tar cvzf needle-$GITHUB_REF_NAME-macos-amd64.tar.gz needle
    - name: Upload binary to the release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: target/release/*.tar.gz
  windows:
    runs-on: windows-latest
    needs: create-release
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-bincache
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash
    - name: Install cargo-vcpkg
      run: cargo install cargo-vcpkg
    # Restore both vcpkg and its artifacts from the GH cache service.
    # Taken from here: https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      env:
        cache-name: cache-vcpkg
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
          !${{ env.VCPKG_ROOT }}/installed
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles( 'Cargo.lock' ) }}
    - name: Install dependencies
      run: cargo vcpkg --verbose build
    - name: Build release version
      run: cargo build -v --release --features static
    - name: Compress binary (using Powershell)
      run: Compress-Archive -Path "$env:GITHUB_WORKSPACE\target\release\needle.exe" -DestinationPath "$env:GITHUB_WORKSPACE\needle-$env:GITHUB_REF_NAME-windows-amd64.zip"
    - name: Upload binary to the release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: "*.zip"
  publish-to-crates-io:
    runs-on: ubuntu-latest
    needs:
      - linux
      - windows
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - name: Publish version to crates.io
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
